---
title: "Class13:Transcriptomics and the analysis of RNA-Seq data"
author: "Jihyun In(A16955363)"
format: pdf
---

## Background
Today we will analyze some RNA Sequencing data on the effects ofa common steroid drug on airway cell lines.

There are two main inputs we need for this analysis:

- `countData`: counts for genes in rows with experiments in the columns
- `colData`: metadata that tells us about the desgn of the experiment (e.e.what is in the columns of `countData`)

## Import 

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

> Q1. How many genes are in this dataset?

```{r}
head(counts)
```


```{r}
nrow(counts)
```
38694 genes are in this dataset.

> Q2. How many 'control' cell lines do we have?

```{r}
#sum(metadata$dex == "control")
table(metadata$dex)
```
We have 4 control cell lines.

## Toy differential gene expression

Let's try finding the average or mean of the "control" and "treated" cp;umns and see if they differ. 

- First we need to find all "control columns
- extract just the "control" values for each gene
- caclulate the `mean()` for each gene"control" values

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
#control.counts
control.mean <- rowMeans(control.counts)
head(control.mean)
```


>Q. Do the same for "treated" to get a `treated.mean()`

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.counts <- counts[ ,treated$id]
#treated.counts
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```
```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```


> Q4. Make a plot of `control. mean` vs `treated.mean`

```{r}
library(ggplot2)
```

```{r}
ggplot(meancounts) + aes(control.mean, treated.mean) + geom_point() + theme_light()
```

Now to plot this on a log-log scale:
```{r}
ggplot(meancounts) + aes(control.mean, treated.mean) + geom_point(alpha=0.3) + theme_bw() + scale_x_log10() + scale_y_log10()
```

On a log2 scale instead:

```{r}
ggplot(meancounts) + aes(control.mean, treated.mean) + geom_point(alpha = 0.3) + theme_light() + scale_x_continuous(trans="log2") + scale_y_continuous(trans="log2")
```


Why use the log_2 scale?

```{r}
#treated/control

log2(40/20) #Doubling the amount
log2(10/20) #halving the amount
```
So I'd assume we want to be more sensitive to changes than 10-fold changes??

A commmon "rule-of-thumb" is to focus o genes with a log2 "fold-change" of +2 as so-called **up regulated** and -2 as **down regulated**

Let's add a log2 fold-change value to our `meancounts` data frame.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```

> Q. Remove any "zero count" genes from our dataset for further analysis

```{r}
to.keep <- rowSums(meancounts[,1:2]==0) == 0
sum(to.keep)
mycounts <- meancounts[to.keep,]
head(mycounts)
```

> Q. How many genes are "up" regulated at a log2fc threshold of +2?

```{r}
sum(mycounts$log2fc >= 2)
```


> Q. How many genes are "down" regulated at a log2fc threshold of -2?

```{r}
sum(mycounts$log2fc <= (-2))
```
We need more stats to see how trustworthy our results are. 

## Setting up for DESeq

LEt's do this properly and consider the stats - are the differences in the means significant?

```{r, message=FALSE}
library(DESeq2)
citation("DESeq2")
```

the first function we will use from this package sets up the input in the particular format that DESeq wants: 

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, colData = metadata, design=~dex)

dds
```
```{r}
dds <- DESeq(dds)
res <- results(dds)
```

```{r}
head(res)
```

## Result figure: volcano plots

Plot of the log2FC vs P-value
```{r}
plot(res$log2FoldChange, res$padj)
```

This p-value data is heavily skewed, so let's log trasform it. 

```{r}
plot(res$log2FoldChange, -log(res$padj)) #flipped y axis
abline(v=-2, col = "red")
abline(v=+2, col = "red")
abline(h=-log(0.05), col="red")

```

```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$log2FoldChange >= +2] <- "blue"

mycols[res$padj >= 0.05] <- "gray"

plot(res$log2FoldChange, -log(res$padj), col = mycols) #flipped y axis
abline(v=-2, col = "red")
abline(v=+2, col = "red")
abline(h=-log(0.05), col="red")
```

>Q. Make a ggplot volcano plot

```{r}
ggplot(res) + 
  aes(log2FoldChange, -log(padj)) + 
  geom_vline(xintercept = -2) + 
  geom_vline(xintercept = 2) + 
  geom_hline(yintercept = 0.05) +
  geom_point( col = mycols) + 
  theme_bw() +
  labs(x = "Log2-fold change", y="-log(adjusted p-value")

```

## Gene notation



We first need to add gene symbols (eg. HBB etc.) so we know what we're working with. We need to "translate" between ENSEMBLE ids that we have in the names of "ids"

```{r}
head(rownames(res))
```

Install from bioconductor with `BiocManager::install("AnnotationDbi")`
```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

What differnet database ID types can I translate between?

```{r}
columns(org.Hs.eg.db)
```

Let's "map" between "ENSEMBL" and "SYMBOL" (i.e. gene symbol)

```{r}
res$symbol <- mapIds(x=org.Hs.eg.db,keys=rownames(res), 
       keytype="ENSEMBL", 
       column="SYMBOL")

head(res)
```

add a few more ID mappings including "GENENAME" and "ENTREZID".

```{r}
res$name <- mapIds(x=org.Hs.eg.db,keys=rownames(res), 
       keytype="ENSEMBL", 
       column="GENENAME")

res$entrez <- mapIds(x=org.Hs.eg.db,keys=rownames(res), 
       keytype="ENSEMBL", 
       column="ENTREZID")

head(res)
```

Be sure to save our annotated results to a file.

```{r}
write.csv(res, file="my_annotated_results.csv")
```



## Pathway Analysis
Find what biological pahtways my differentially expressed gene

Install the packages we need for pathway analysis: Run in your R console (i.e. not your Quarto doc!)

`BiocManager::install( c("pathview", "gage", "gageData") )`

```{r}
library(gage)
library(gageData)
library(pathview)
```
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)

```

To run pathway analysiss we will use the `gage()` function and it requires a wee "vector of imprtance."We will use our Log2FC results from our `res` object:

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)

```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```


What is the returned `keggres` object

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```


wE CAN PASS OUR FOLDCHANGES VECTOR(OUR RESULTS) together with any of these highlighted pathway IDs to see . 

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![The asthma pathway overlaps with our differentially expressed genes.](hsa05310.pathview.png)