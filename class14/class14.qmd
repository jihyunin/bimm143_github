---
title: "class14"
format: pdf
author: "Jihyun In (PID:A16955363)"
---

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1.


```{r, message=FALSE}
library(gage)
library(gageData)
library(pathview)
library(DESeq2)
library(AnnotationDbi)
library(org.Hs.eg.db)
```


## Data import
```{r}
countData <- read.csv("GSE37704_featurecounts.csv", row.names = 1)
colData<-read.csv("GSE37704_metadata.csv" , row.names = 1)
```

```{r}
head(countData)
```

## Tidy counts to match metadata

```{r}
rownames(colData)
```
```{r}
colnames(countData)
```
```{r}
counts <- countData[,-1 ]
```



## Remove zero count genes

We will have rows in `counts` for genes that we cna not say anything about because they have zero expression in the particular tissue we are looking at. 

if the `rowsums()` is zero, then give a gene has no count data

```{r}
to.keep <- rowSums(counts) != 0 
cleancounts <- counts[to.keep, ]
```

>Q. How many genes do we have left?

```{r}
nrow(cleancounts)
```


## Setup for DESeq

```{r}
dds <- DESeqDataSetFromMatrix(countData=cleancounts, colData=colData, design=~condition)
```


## Run DESeq analysis

```{r}
dds <- DESeq(dds)
```


## Extract the results
```{r}
res <- results(dds)

head(res)
```


## Add Gene annotation

```{r}
res$symbol <- mapIds(x=org.Hs.eg.db,keys=rownames(res), 
       keytype="ENSEMBL", 
       column="SYMBOL")

res$name <- mapIds(x=org.Hs.eg.db,keys=rownames(res), 
       keytype="ENSEMBL", 
       column="GENENAME")

res$entrez <- mapIds(x=org.Hs.eg.db,keys=rownames(res), 
       keytype="ENSEMBL", 
       column="ENTREZID")

head(res)
```

## Save my reuslts to a csv vile

```{r}
write.csv(res, "results.csv")
```



## Result Visualization
```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$log2FoldChange >= +2] <- "blue"

mycols[res$padj >= 0.05] <- "gray"

plot(res$log2FoldChange, -log(res$padj), col = mycols) #flipped y axis
abline(v=-2, col = "red")
abline(v=+2, col = "red")
abline(h=-log(0.05), col="red")
```

Using ggplot

```{r}
library(ggplot2)
```

```{r}


ggplot(res) + 
  aes(log2FoldChange, -log(padj)) + 
  geom_vline(xintercept = -2) + 
  geom_vline(xintercept = 2) + 
  geom_hline(yintercept = 0.05) +
  geom_point( col = mycols) + 
  theme_bw() +
  labs(x = "Log2-fold change", y="-log(adjusted p-value")


```



## Pathway analysis

```{r}
data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Running gage pathway analysis:

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```


Looking at results:
```{r}
attributes(keggres)
```
Looking at the first few (less) pathways:

```{r}
head(keggres$less)
```

Viewing cell cycle pathways with KEGG identifier hsa04110:

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")

```

![](hsa04110.pathview.png)


###Focusing on upregulated pathways

```{r}
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```
```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

### Downregulated pathways

Doing the same for downregulated pathways

###Focusing on upregulated pathways


```{r}
keggrespathways2 <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresids2 = substr(keggrespathways2, start=1, stop=8)
keggresids2
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```


## Gene ontology (GO genesets)

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

## Reactome analysis online

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

![](R-HSA-69278.png)
